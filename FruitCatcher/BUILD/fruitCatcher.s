;
; File generated by cc65 v 2.19 - Git 852b622
;
	.fopt		compiler,"cc65 v 2.19 - Git 852b622"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_ppu_wait_nmi
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_oam_clear
	.import		_oam_meta_spr
	.export		_grapes
	.export		_bomb
	.export		_watermelon
	.export		_apple
	.export		_banana
	.export		_orange
	.export		_basket
	.export		_paletteSpr
	.export		_paletteBG
	.export		_yPos
	.export		_xPos2
	.export		_main

.segment	"DATA"

_yPos:
	.byte	$40
_xPos2:
	.byte	$10

.segment	"RODATA"

_grapes:
	.byte	$E9
	.byte	$EA
	.byte	$00
	.byte	$01
	.byte	$F1
	.byte	$EA
	.byte	$01
	.byte	$01
	.byte	$E9
	.byte	$F2
	.byte	$10
	.byte	$01
	.byte	$F1
	.byte	$F2
	.byte	$11
	.byte	$01
	.byte	$80
_bomb:
	.byte	$DF
	.byte	$F5
	.byte	$02
	.byte	$01
	.byte	$E7
	.byte	$F5
	.byte	$03
	.byte	$01
	.byte	$DF
	.byte	$FC
	.byte	$12
	.byte	$01
	.byte	$E7
	.byte	$FC
	.byte	$13
	.byte	$01
	.byte	$80
_watermelon:
	.byte	$EA
	.byte	$F1
	.byte	$04
	.byte	$00
	.byte	$F2
	.byte	$F1
	.byte	$05
	.byte	$00
	.byte	$EA
	.byte	$F9
	.byte	$14
	.byte	$00
	.byte	$F2
	.byte	$F9
	.byte	$15
	.byte	$00
	.byte	$80
_apple:
	.byte	$E2
	.byte	$E7
	.byte	$06
	.byte	$00
	.byte	$EA
	.byte	$E7
	.byte	$07
	.byte	$00
	.byte	$E2
	.byte	$EF
	.byte	$16
	.byte	$00
	.byte	$EA
	.byte	$EF
	.byte	$17
	.byte	$00
	.byte	$80
_banana:
	.byte	$E7
	.byte	$ED
	.byte	$20
	.byte	$02
	.byte	$EF
	.byte	$ED
	.byte	$21
	.byte	$02
	.byte	$E7
	.byte	$F5
	.byte	$30
	.byte	$02
	.byte	$EF
	.byte	$F5
	.byte	$31
	.byte	$02
	.byte	$80
_orange:
	.byte	$F3
	.byte	$EE
	.byte	$22
	.byte	$03
	.byte	$FB
	.byte	$EE
	.byte	$23
	.byte	$03
	.byte	$F3
	.byte	$F6
	.byte	$32
	.byte	$03
	.byte	$FB
	.byte	$F6
	.byte	$33
	.byte	$03
	.byte	$80
_basket:
	.byte	$E0
	.byte	$F0
	.byte	$24
	.byte	$02
	.byte	$E8
	.byte	$F0
	.byte	$25
	.byte	$02
	.byte	$F0
	.byte	$F0
	.byte	$26
	.byte	$02
	.byte	$F8
	.byte	$F0
	.byte	$27
	.byte	$02
	.byte	$E0
	.byte	$F8
	.byte	$34
	.byte	$02
	.byte	$E8
	.byte	$F8
	.byte	$35
	.byte	$02
	.byte	$F0
	.byte	$F8
	.byte	$36
	.byte	$02
	.byte	$F8
	.byte	$F8
	.byte	$37
	.byte	$02
	.byte	$E0
	.byte	$00
	.byte	$44
	.byte	$02
	.byte	$E8
	.byte	$00
	.byte	$45
	.byte	$02
	.byte	$F0
	.byte	$00
	.byte	$46
	.byte	$02
	.byte	$F8
	.byte	$00
	.byte	$47
	.byte	$02
	.byte	$E0
	.byte	$08
	.byte	$54
	.byte	$02
	.byte	$E8
	.byte	$08
	.byte	$55
	.byte	$02
	.byte	$F0
	.byte	$08
	.byte	$56
	.byte	$02
	.byte	$F8
	.byte	$08
	.byte	$57
	.byte	$02
	.byte	$80
_paletteSpr:
	.byte	$3C
	.byte	$0F
	.byte	$16
	.byte	$2A
	.byte	$3C
	.byte	$0F
	.byte	$13
	.byte	$2A
	.byte	$3C
	.byte	$0F
	.byte	$18
	.byte	$28
	.byte	$3C
	.byte	$0F
	.byte	$27
	.byte	$2A
_paletteBG:
	.byte	$31
	.byte	$16
	.byte	$22
	.byte	$36
	.byte	$31
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$31
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$31
	.byte	$0F
	.byte	$0F
	.byte	$0F

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_spr(paletteSpr);
;
	lda     #<(_paletteSpr)
	ldx     #>(_paletteSpr)
	jsr     _pal_spr
;
; pal_bg(paletteBG);
;
	lda     #<(_paletteBG)
	ldx     #>(_paletteBG)
	jsr     _pal_bg
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; ppu_wait_nmi();
;
L0002:	jsr     _ppu_wait_nmi
;
; oam_clear();
;
	jsr     _oam_clear
;
; oam_meta_spr(xPos2 + 100, yPos, watermelon);
;
	jsr     decsp2
	lda     _xPos2
	clc
	adc     #$64
	ldy     #$01
	sta     (sp),y
	lda     _yPos
	dey
	sta     (sp),y
	lda     #<(_watermelon)
	ldx     #>(_watermelon)
	jsr     _oam_meta_spr
;
; oam_meta_spr(xPos2 + 20, yPos, basket);
;
	jsr     decsp2
	lda     _xPos2
	clc
	adc     #$14
	ldy     #$01
	sta     (sp),y
	lda     _yPos
	dey
	sta     (sp),y
	lda     #<(_basket)
	ldx     #>(_basket)
	jsr     _oam_meta_spr
;
; ++yPos;
;
	inc     _yPos
;
; while (1) {
;
	jmp     L0002

.endproc

